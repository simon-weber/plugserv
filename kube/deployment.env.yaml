---
kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  name: plugserv-ingress
  annotations:
    external-dns.alpha.kubernetes.io/hostname: www.plugserv.com
spec:
  tls:
  - hosts:
    - www.plugserv.com
    secretName: plugserv-cert
  rules:
  - host: www.plugserv.com
    http:
      paths:
      - path: /assets
        pathType: Prefix
        backend:
          serviceName: plugserv-service
          servicePort: 80
      - path: /
        pathType: Prefix
        backend:
          serviceName: plugserv-service
          servicePort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: plugserv-service
spec:
  selector:
    app: plugserv
  ports:
  - name: web
    port: 8000
  - name: static
    port: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: plugserv-config
data:
  HC_ID_BACKUP: "${HC_ID_BACKUP}"
  HC_ID_CLEANUP: "${HC_ID_CLEANUP}"
  SITE: "www.plugserv.com"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plugserv
spec:
  selector:
    matchLabels:
      app: plugserv
  replicas: 1
  template:
    metadata:
      labels:
        app: plugserv
    spec:
      nodeSelector:
        kubernetes.io/hostname: kilo
      imagePullSecrets:
      - name: registry-credentials
      initContainers:
      - name: init
        image: ${DOCKER_REPO}/plugserv:k8s
        imagePullPolicy: Always
        command: ['./scripts/init.sh']
        envFrom:
        - secretRef:
            name: plugserv-web
        - configMapRef:
            name: plugserv-config
        volumeMounts:
        - name: appvol
          mountPath: /opt/plugserv
        - name: assetvol
          mountPath: /opt/assets
      containers:
      - name: web
        image: ${DOCKER_REPO}/plugserv:k8s
        imagePullPolicy: Always
        envFrom:
        - secretRef:
            name: plugserv-web
        - configMapRef:
            name: plugserv-config
        volumeMounts:
        - name: appvol
          mountPath: /opt/plugserv
        ports:
        - containerPort: 8000
      - name: static
        image: nginx
        volumeMounts:
        - name: assetvol
          mountPath: /usr/share/nginx/html/assets
        ports:
        - containerPort: 80
      volumes:
      - name: appvol
        hostPath:
          path: /opt/k3slocal/plugserv
          type: DirectoryOrCreate
      - name: assetvol
        hostPath:
          path: /opt/k3slocal/plugserv-static
          type: DirectoryOrCreate
      tolerations:
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 10
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 10
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: plugserv-cleanup
spec:
  schedule: "30 7 * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 300
      template:
        spec:
          nodeSelector:
            kubernetes.io/hostname: kilo
          containers:
          - name: cleanup
            image: ${DOCKER_REPO}/plugserv:k8s
            command: ["./scripts/cleanup.sh"]
            envFrom:
            - secretRef:
                name: plugserv-web
            - configMapRef:
                name: plugserv-config
            volumeMounts:
            - name: appvol
              mountPath: /opt/plugserv
          volumes:
          - name: appvol
            hostPath:
              path: /opt/k3slocal/plugserv
              type: Directory
          restartPolicy: OnFailure
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: plugserv-backup
spec:
  schedule: "30 8 * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 300
      template:
        spec:
          nodeSelector:
            kubernetes.io/hostname: kilo
          containers:
          - name: cleanup
            image: ${DOCKER_REPO}/plugserv:k8s
            command: ["./scripts/backup.sh"]
            envFrom:
            - secretRef:
                name: plugserv-web
            - secretRef:
                name: scaleway-s3-secret
            - configMapRef:
                name: plugserv-config
            volumeMounts:
            - name: appvol
              mountPath: /opt/plugserv
          volumes:
          - name: appvol
            hostPath:
              path: /opt/k3slocal/plugserv
              type: Directory
          restartPolicy: OnFailure
